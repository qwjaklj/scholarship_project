[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Unveiling the Climate Guardians: The Role of Vegetation in Temperature Regulation from 2025 to 2074",
    "section": "",
    "text": "As a cloud of climate change continues getting closer every year, understanding the complex dynamics behind regional temperature disparities becomes more important. This paper sets out to unravel them by taking an area specific to the forecast between 2025 and 2074. The ultimate aim is to elaborate on the features of temperature trends and, at the end of the day, come up with mitigation ways to soften the adverse effects of the phenomenon.\nOur story begins with the selection of Scenario 22, which is run by the Beijing Climate Center Climate System Model version 1.1 under the Representative Concentration Pathway 4.5. Scenario 22 was chosen from several available models, as it produced the lowest mean RMSE and, by extension, better predictive accuracy of our Random Forest model. This just cements our footing as we move ahead from the confidence in our analysis, using data from Scenario 22 to visualize the temperature trend in the future.\nOn plotting the projected temperatures, it was noted that between the years 2025 and 2074, there will be an increase in the temperatures that will be steady over the region. Apparently, the temperatures in the western region always rose above the temperatures in the eastern region, which led me to investigate what could be the cause of this difference in temperature. I concluded that the vegetation cover may be a major cause of the variation in the temperatures. To test this hypothesis further, we considered the spatial distribution of bare ground cover in the region. The results were indeed dramatic: the east, which was much more vegetated, was far cooler in temperature than the very open western part. Such an observation points toward the significance of vegetative cover in temperature moderation and actually warrants even greater effort to identify the actual types of vegetative covers that could be responsible for such an effect.\nThe next step of our research was to find out the types of vegetation that marked the most significance in regard to temperature. Having correlated the different types of vegetation with temperature, we found out that vegetative litter was the lynchpin factor. We found a significant inverse correlation of vegetative litter with fractions of summer and winter temperatures, hence implying that higher coverage of litter will result in lower temperatures. In addition, herb coverage was also found to have a significant positive correlation with litter coverage; this implies that the actions of these types of vegetation are jointly exerting an influence on the temperature levels of the study area.\nHere, we provide some actionable understandings of the mechanisms by which vegetation influences temperature dynamics. Such results emphasize the importance of maintaining and increasing plant litter and herb coverage as highly effective means to fight against increasing temperatures for environmental integrity. We shall, therefore, proceed with the manner of using these insights in the development of targeted interventions in this regard that possibly may help in mitigating adverse climate change impacts and fostering a resilient ecosystem for the future."
  },
  {
    "objectID": "index.html#introduction",
    "href": "index.html#introduction",
    "title": "Unveiling the Climate Guardians: The Role of Vegetation in Temperature Regulation from 2025 to 2074",
    "section": "",
    "text": "As a cloud of climate change continues getting closer every year, understanding the complex dynamics behind regional temperature disparities becomes more important. This paper sets out to unravel them by taking an area specific to the forecast between 2025 and 2074. The ultimate aim is to elaborate on the features of temperature trends and, at the end of the day, come up with mitigation ways to soften the adverse effects of the phenomenon.\nOur story begins with the selection of Scenario 22, which is run by the Beijing Climate Center Climate System Model version 1.1 under the Representative Concentration Pathway 4.5. Scenario 22 was chosen from several available models, as it produced the lowest mean RMSE and, by extension, better predictive accuracy of our Random Forest model. This just cements our footing as we move ahead from the confidence in our analysis, using data from Scenario 22 to visualize the temperature trend in the future.\nOn plotting the projected temperatures, it was noted that between the years 2025 and 2074, there will be an increase in the temperatures that will be steady over the region. Apparently, the temperatures in the western region always rose above the temperatures in the eastern region, which led me to investigate what could be the cause of this difference in temperature. I concluded that the vegetation cover may be a major cause of the variation in the temperatures. To test this hypothesis further, we considered the spatial distribution of bare ground cover in the region. The results were indeed dramatic: the east, which was much more vegetated, was far cooler in temperature than the very open western part. Such an observation points toward the significance of vegetative cover in temperature moderation and actually warrants even greater effort to identify the actual types of vegetative covers that could be responsible for such an effect.\nThe next step of our research was to find out the types of vegetation that marked the most significance in regard to temperature. Having correlated the different types of vegetation with temperature, we found out that vegetative litter was the lynchpin factor. We found a significant inverse correlation of vegetative litter with fractions of summer and winter temperatures, hence implying that higher coverage of litter will result in lower temperatures. In addition, herb coverage was also found to have a significant positive correlation with litter coverage; this implies that the actions of these types of vegetation are jointly exerting an influence on the temperature levels of the study area.\nHere, we provide some actionable understandings of the mechanisms by which vegetation influences temperature dynamics. Such results emphasize the importance of maintaining and increasing plant litter and herb coverage as highly effective means to fight against increasing temperatures for environmental integrity. We shall, therefore, proceed with the manner of using these insights in the development of targeted interventions in this regard that possibly may help in mitigating adverse climate change impacts and fostering a resilient ecosystem for the future."
  },
  {
    "objectID": "data_cleaning.html",
    "href": "data_cleaning.html",
    "title": "Quick Look at Data",
    "section": "",
    "text": "Quick Look at Data\n\n\nShow the code\nimport pandas as pd\n\nnearterm_data = pd.read_csv('../data/nearterm_data_2020-2024.csv')\nhistoric_data = pd.read_csv('../data/NABR_historic.csv')\n\nnearterm_data.head()\n\n\n\n\n\n\n\n\n\n\nlong\nlat\nyear\nTimePeriod\nRCP\nscenario\ntreecanopy\nAnn_Herb\nBare\nHerb\n...\nPPT_Annual\nT_Winter\nT_Summer\nT_Annual\nTmax_Summer\nTmin_Winter\nVWC_Winter_whole\nVWC_Spring_whole\nVWC_Summer_whole\nVWC_Fall_whole\n\n\n\n\n0\n-110.0472\n37.60413\n2021\nNT\n4.5\nsc22\n0\n0\n84\n5\n...\n6.37\n1.630333\n24.50402\n24.50402\n36.89\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n1\n-110.0472\n37.60413\n2021\nNT\n4.5\nsc22\n0\n0\n84\n5\n...\nNaN\nNaN\nNaN\nNaN\nNaN\n-12.77\n0.114652\n0.078764\n0.043514\n0.051281\n\n\n2\n-110.0472\n37.60413\n2021\nNT\n4.5\nsc23\n0\n0\n84\n5\n...\n3.09\n1.389056\n24.11043\n24.11043\n37.95\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n3\n-110.0472\n37.60413\n2021\nNT\n4.5\nsc23\n0\n0\n84\n5\n...\nNaN\nNaN\nNaN\nNaN\nNaN\n-18.96\n0.130221\n0.096412\n0.041232\n0.092241\n\n\n4\n-110.0472\n37.60413\n2021\nNT\n4.5\nsc24\n0\n0\n84\n5\n...\n6.87\n-0.334389\n25.54266\n10.31321\n37.74\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n\n\n5 rows × 29 columns\n\n\n\n\n\n\nShow the code\nhistoric_data.head()\n\n\n\n\n\n\n\n\n\n\nlong\nlat\nyear\nTimePeriod\nRCP\nscenario\ntreecanopy\nAnn_Herb\nBare\nHerb\n...\nPPT_Annual\nT_Winter\nT_Summer\nT_Annual\nTmax_Summer\nTmin_Winter\nVWC_Winter_whole\nVWC_Spring_whole\nVWC_Summer_whole\nVWC_Fall_whole\n\n\n\n\n0\n-110.0472\n37.60413\n1980\nHist\nhistorical\nsc1\n0\n0\n84\n5\n...\n13.79\n0.964835\n23.15924\n23.159240\n37.05\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n1\n-110.0472\n37.60413\n1980\nHist\nhistorical\nsc1\n0\n0\n84\n5\n...\n2.69\n0.964835\n23.15924\n0.964835\n37.05\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n2\n-110.0472\n37.60413\n1980\nHist\nhistorical\nsc1\n0\n0\n84\n5\n...\n13.79\n0.964835\n23.15924\n0.964835\n37.05\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n3\n-110.0472\n37.60413\n1980\nHist\nhistorical\nsc1\n0\n0\n84\n5\n...\n2.69\n0.964835\n23.15924\n23.159240\n37.05\nNaN\nNaN\nNaN\nNaN\nNaN\n\n\n4\n-110.0472\n37.60413\n1980\nHist\nhistorical\nsc1\n0\n0\n84\n5\n...\nNaN\nNaN\nNaN\nNaN\nNaN\n-12.45\n0.113447\n0.096831\n0.041876\n0.052298\n\n\n\n\n5 rows × 29 columns\n\n\n\n\n\n\nDrop Wrong Columns\n\n\nShow the code\nhistoric_data.drop(columns = ['PPT_Annual','T_Annual'],inplace=True)\nprint(historic_data.shape)\nhistoric_data.drop_duplicates(inplace=True)\nprint(historic_data.shape)\n\nnearterm_data.drop(columns = ['PPT_Annual','T_Annual'],inplace=True)\nprint(nearterm_data.shape)\nnearterm_data.drop_duplicates(inplace=True)\nprint(nearterm_data.shape)\n\n\n(13821, 27)\n(8775, 27)\n(55802, 27)\n(36000, 27)\n\n\n\n\nShow the code\nhistoric_data.columns\n\n\nIndex(['long', 'lat', 'year', 'TimePeriod', 'RCP', 'scenario', 'treecanopy',\n       'Ann_Herb', 'Bare', 'Herb', 'Litter', 'Shrub',\n       'DrySoilDays_Summer_whole', 'Evap_Summer',\n       'ExtremeShortTermDryStress_Summer_whole', 'FrostDays_Winter',\n       'NonDrySWA_Summer_whole', 'PPT_Winter', 'PPT_Summer', 'T_Winter',\n       'T_Summer', 'Tmax_Summer', 'Tmin_Winter', 'VWC_Winter_whole',\n       'VWC_Spring_whole', 'VWC_Summer_whole', 'VWC_Fall_whole'],\n      dtype='object')\n\n\n\n\nFill Empty Data Points\n\n\nShow the code\n# Make Plant Coverate be percentage rather than a number\nhistoric_data['treecanopy_percent'] = 100 * historic_data['treecanopy']/(historic_data['treecanopy']+ historic_data['Ann_Herb'] + historic_data['Bare']+ historic_data['Herb']+ historic_data['Litter'] + historic_data['Shrub'])\nhistoric_data['Ann_Herb_percent'] = 100 * historic_data['Ann_Herb']/(historic_data['treecanopy']+ historic_data['Ann_Herb'] + historic_data['Bare']+ historic_data['Herb']+ historic_data['Litter'] + historic_data['Shrub'])\nhistoric_data['Bare_percent'] = 100 * historic_data['Bare']/(historic_data['treecanopy']+ historic_data['Ann_Herb'] + historic_data['Bare']+ historic_data['Herb']+ historic_data['Litter'] + historic_data['Shrub'])\nhistoric_data['Herb_percent'] = 100 * historic_data['Herb']/(historic_data['treecanopy']+ historic_data['Ann_Herb'] + historic_data['Bare']+ historic_data['Herb']+ historic_data['Litter'] + historic_data['Shrub'])\nhistoric_data['Litter_percent'] = 100 * historic_data['Litter']/(historic_data['treecanopy']+ historic_data['Ann_Herb'] + historic_data['Bare']+ historic_data['Herb']+ historic_data['Litter'] + historic_data['Shrub'])\nhistoric_data['Shrub_percent'] = 100 * historic_data['treecanopy']/(historic_data['treecanopy']+ historic_data['Ann_Herb'] + historic_data['Bare']+ historic_data['Herb']+ historic_data['Litter'] + historic_data['Shrub'])\n\nnearterm_data['treecanopy_percent'] = 100 * nearterm_data['treecanopy']/(nearterm_data['treecanopy']+ nearterm_data['Ann_Herb'] + nearterm_data['Bare']+ nearterm_data['Herb']+ nearterm_data['Litter'] + nearterm_data['Shrub'])\nnearterm_data['Ann_Herb_percent'] = 100 * nearterm_data['Ann_Herb']/(nearterm_data['treecanopy']+ nearterm_data['Ann_Herb'] + nearterm_data['Bare']+ nearterm_data['Herb']+ nearterm_data['Litter'] + nearterm_data['Shrub'])\nnearterm_data['Bare_percent'] = 100 * nearterm_data['Bare']/(nearterm_data['treecanopy']+ nearterm_data['Ann_Herb'] + nearterm_data['Bare']+ nearterm_data['Herb']+ nearterm_data['Litter'] + nearterm_data['Shrub'])\nnearterm_data['Herb_percent'] = 100 * nearterm_data['Herb']/(nearterm_data['treecanopy']+ nearterm_data['Ann_Herb'] + nearterm_data['Bare']+ nearterm_data['Herb']+ nearterm_data['Litter'] + nearterm_data['Shrub'])\nnearterm_data['Litter_percent'] = 100 * nearterm_data['Litter']/(nearterm_data['treecanopy']+ nearterm_data['Ann_Herb'] + nearterm_data['Bare']+ nearterm_data['Herb']+ nearterm_data['Litter'] + nearterm_data['Shrub'])\nnearterm_data['Shrub_percent'] = 100 * nearterm_data['treecanopy']/(nearterm_data['treecanopy']+ nearterm_data['Ann_Herb'] + nearterm_data['Bare']+ nearterm_data['Herb']+ nearterm_data['Litter'] + nearterm_data['Shrub'])\n\n# Drop unnecessary columns\nhistoric_data.drop(columns=['treecanopy','Ann_Herb', 'Bare', 'Herb', 'Litter', 'Shrub'],inplace=True)\nnearterm_data.drop(columns=['treecanopy','Ann_Herb', 'Bare', 'Herb', 'Litter', 'Shrub'],inplace=True)\n\n# Round Numbers\nhistoric_data = historic_data.round(3)\nnearterm_data = nearterm_data.round(3)\n\n# Code refers to https://saturncloud.io/blog/how-to-combine-multiple-rows-into-a-single-row-with-pandas/#:~:text=One%20way%20to%20combine%20multiple,aggregation%20function%20to%20each%20group.\nagg_functions = {'DrySoilDays_Summer_whole': 'sum', 'Evap_Summer' : 'sum',\n    'ExtremeShortTermDryStress_Summer_whole' : 'sum', 'FrostDays_Winter' : 'sum',\n    'NonDrySWA_Summer_whole' : 'sum', 'PPT_Winter' : 'sum', 'PPT_Summer' : 'sum', 'T_Winter': 'sum',\n    'T_Summer': 'sum', 'Tmax_Summer': 'sum', 'Tmin_Winter': 'sum', 'VWC_Winter_whole': 'sum',\n    'VWC_Spring_whole': 'sum', 'VWC_Summer_whole': 'sum', 'VWC_Fall_whole': 'sum' }\n\nrequired_columns = ['long', 'lat', 'year', 'TimePeriod', 'RCP', 'scenario', 'treecanopy_percent',\n    'Ann_Herb_percent', 'Bare_percent', 'Herb_percent', 'Litter_percent', 'Shrub_percent']\n\nhistoric_data = historic_data.groupby(required_columns).aggregate(agg_functions)\nnearterm_data = nearterm_data.groupby(required_columns).aggregate(agg_functions)\n\nhistoric_data.to_csv('../data/historic_cleaned.csv')\nnearterm_data.to_csv('../data/nearterm_cleaned.csv')\n\n\n\n\nData Merging\n\n\nShow the code\nnearterm_df = pd.read_csv('../data/nearterm_cleaned.csv')\nhistoric_df = pd.read_csv('../data/historic_cleaned.csv')\nmerged_data = pd.concat([nearterm_df, historic_df], ignore_index=True)\n#print(merged_data.columns)\nmerged_data = merged_data.sort_values(by='year').groupby(['long', 'lat']).apply(lambda x: x).reset_index(drop=True)\nmerged_data = merged_data.round(3)\nmerged_data.head()\n\n\n/var/folders/_c/cbt8xxhx1q18s6z108pfn5d00000gn/T/ipykernel_4530/4072227006.py:5: DeprecationWarning: DataFrameGroupBy.apply operated on the grouping columns. This behavior is deprecated, and in a future version of pandas the grouping columns will be excluded from the operation. Either pass `include_groups=False` to exclude the groupings or explicitly select the grouping columns after groupby to silence this warning.\n  merged_data = merged_data.sort_values(by='year').groupby(['long', 'lat']).apply(lambda x: x).reset_index(drop=True)\n\n\n\n\n\n\n\n\n\n\nlong\nlat\nyear\nTimePeriod\nRCP\nscenario\ntreecanopy_percent\nAnn_Herb_percent\nBare_percent\nHerb_percent\n...\nPPT_Winter\nPPT_Summer\nT_Winter\nT_Summer\nTmax_Summer\nTmin_Winter\nVWC_Winter_whole\nVWC_Spring_whole\nVWC_Summer_whole\nVWC_Fall_whole\n\n\n\n\n0\n-110.047\n37.604\n1980\nHist\nhistorical\nsc1\n0.0\n0.0\n78.505\n4.673\n...\n13.79\n2.69\n0.965\n23.159\n37.05\n-12.45\n0.113\n0.097\n0.042\n0.052\n\n\n1\n-110.047\n37.604\n1981\nHist\nhistorical\nsc1\n0.0\n0.0\n78.505\n4.673\n...\n2.25\n9.39\n3.334\n23.271\n37.55\n-9.35\n0.049\n0.061\n0.043\n0.094\n\n\n2\n-110.047\n37.604\n1982\nHist\nhistorical\nsc1\n0.0\n0.0\n78.505\n4.673\n...\n4.12\n9.50\n-0.016\n22.057\n36.65\n-16.55\n0.109\n0.075\n0.046\n0.068\n\n\n3\n-110.047\n37.604\n1983\nHist\nhistorical\nsc1\n0.0\n0.0\n78.505\n4.673\n...\n7.09\n10.22\n0.409\n21.328\n34.55\n-15.05\n0.120\n0.103\n0.044\n0.075\n\n\n4\n-110.047\n37.604\n1984\nHist\nhistorical\nsc1\n0.0\n0.0\n78.505\n4.673\n...\n4.77\n9.49\n-1.047\n21.960\n35.35\n-18.45\n0.120\n0.078\n0.043\n0.070\n\n\n\n\n5 rows × 27 columns\n\n\n\n\n\n\nSave as CSV\n\n\nShow the code\nmerged_data.to_csv('../data/final.csv')"
  },
  {
    "objectID": "EDA.html",
    "href": "EDA.html",
    "title": "Import Data Set",
    "section": "",
    "text": "Import Data Set\n\n\nShow the code\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\nimport numpy as np\n\ndf = pd.read_csv('../data/historic_cleaned.csv')\n#df.drop(columns=['Unnamed: 0'],inplace=True)\n\n\n\n\nDisplay Summary Statistics of The Dataset\n\n\nShow the code\ndf.describe()\n\n\n\n\n\n\n\n\n\n\nlong\nlat\nyear\ntreecanopy_percent\nAnn_Herb_percent\nBare_percent\nHerb_percent\nLitter_percent\nShrub_percent\nDrySoilDays_Summer_whole\n...\nPPT_Winter\nPPT_Summer\nT_Winter\nT_Summer\nTmax_Summer\nTmin_Winter\nVWC_Winter_whole\nVWC_Spring_whole\nVWC_Summer_whole\nVWC_Fall_whole\n\n\n\n\ncount\n4407.000000\n4407.000000\n4407.000000\n4407.000000\n4407.000000\n4407.000000\n4407.000000\n4407.000000\n4407.000000\n4407.000000\n...\n4407.000000\n4407.000000\n4407.000000\n4407.000000\n4407.000000\n4407.000000\n4407.000000\n4407.000000\n4407.000000\n4407.000000\n\n\nmean\n-110.006345\n37.608168\n1999.000000\n8.895274\n0.223796\n55.466142\n9.217265\n11.412204\n8.895274\n7.563876\n...\n6.534697\n7.477377\n-0.114912\n22.433525\n35.909020\n-15.539766\n0.119381\n0.109530\n0.068327\n0.093987\n\n\nstd\n0.022618\n0.016201\n11.255906\n7.836078\n1.040234\n19.097044\n3.812657\n6.042003\n7.836078\n20.904837\n...\n3.446036\n2.980412\n1.407679\n1.029859\n1.335224\n3.130615\n0.037845\n0.039645\n0.018993\n0.028630\n\n\nmin\n-110.047000\n37.570000\n1980.000000\n0.000000\n0.000000\n9.910000\n1.010000\n1.053000\n0.000000\n0.000000\n...\n1.830000\n2.480000\n-3.435000\n19.555000\n32.150000\n-26.250000\n0.033000\n0.035000\n0.030000\n0.031000\n\n\n25%\n-110.027000\n37.598000\n1989.000000\n0.000000\n0.000000\n41.964000\n7.368000\n7.080000\n0.000000\n0.000000\n...\n3.850000\n5.710000\n-1.218000\n21.715000\n34.950000\n-17.250000\n0.091000\n0.079000\n0.052000\n0.074000\n\n\n50%\n-110.006000\n37.609000\n1999.000000\n8.108000\n0.000000\n54.310000\n9.709000\n9.677000\n8.108000\n0.000000\n...\n6.150000\n7.130000\n-0.135000\n22.327000\n35.950000\n-14.950000\n0.119000\n0.102000\n0.067000\n0.093000\n\n\n75%\n-109.991000\n37.622000\n2009.000000\n15.789000\n0.000000\n68.421000\n10.989000\n15.094000\n15.789000\n0.000000\n...\n7.530000\n9.480000\n0.969000\n23.207000\n37.050000\n-13.800000\n0.144500\n0.139000\n0.083000\n0.111000\n\n\nmax\n-109.966000\n37.635000\n2018.000000\n26.126000\n5.085000\n97.895000\n20.202000\n28.235000\n26.126000\n89.000000\n...\n17.270000\n17.890000\n3.393000\n24.550000\n38.550000\n-9.350000\n0.233000\n0.215000\n0.119000\n0.205000\n\n\n\n\n8 rows × 24 columns\n\n\n\n\n\n\nDistribution of Vegetation Types\n\n\nShow the code\n# This code refers to https://matplotlib.org/stable/gallery/subplots_axes_and_figures/subplots_demo.html, which talks about subplots in python.\nplt.figure(figsize=(14, 7))\n\nplt.subplot(2, 3, 1)\nsns.histplot(df['treecanopy_percent'], kde=True, bins=30)\nplt.title('Tree Canopy Distribution')\n\nplt.subplot(2, 3, 2)\nsns.histplot(df['Ann_Herb_percent'], kde=True, bins=30)\nplt.title('Annual Herbaceous Distribution')\n\nplt.subplot(2, 3, 3)\nsns.histplot(df['Bare_percent'], kde=True, bins=30)\nplt.title('Bare Ground Distribution')\n\nplt.subplot(2, 3, 4)\nsns.histplot(df['Herb_percent'], kde=True, bins=30)\nplt.title('Herbaceous Distribution')\n\nplt.subplot(2, 3, 5)\nsns.histplot(df['Litter_percent'], kde=True, bins=30)\nplt.title('Litter Distribution')\n\nplt.subplot(2, 3, 6)\nsns.histplot(df['Shrub_percent'], kde=True, bins=30)\nplt.title('Shrub Distribution')\n\nplt.tight_layout()\nplt.show()\n\n\n/Users/modomodo/anaconda3/lib/python3.11/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n/Users/modomodo/anaconda3/lib/python3.11/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n/Users/modomodo/anaconda3/lib/python3.11/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n/Users/modomodo/anaconda3/lib/python3.11/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n/Users/modomodo/anaconda3/lib/python3.11/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n/Users/modomodo/anaconda3/lib/python3.11/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n\n\n\n\n\n\n\n\n\n\n\nSeasonal Climate Factors\n\n\nShow the code\nplt.figure(figsize=(14, 7))\n\nplt.subplot(2, 2, 1)\nsns.histplot(df['T_Winter'], kde=True, bins=30)\nplt.title('Winter Temperature Distribution')\n\nplt.subplot(2, 2, 2)\nsns.histplot(df['T_Summer'], kde=True, bins=30)\nplt.title('Summer Temperature Distribution')\n\nplt.subplot(2, 2, 3)\nsns.histplot(df['PPT_Winter'], kde=True, bins=30)\nplt.title('Winter Precipitation Distribution')\n\nplt.subplot(2, 2, 4)\nsns.histplot(df['PPT_Summer'], kde=True, bins=30)\nplt.title('Summer Precipitation Distribution')\n\nplt.tight_layout()\nplt.show()\n\n\n/Users/modomodo/anaconda3/lib/python3.11/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n/Users/modomodo/anaconda3/lib/python3.11/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n/Users/modomodo/anaconda3/lib/python3.11/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n/Users/modomodo/anaconda3/lib/python3.11/site-packages/seaborn/_oldcore.py:1119: FutureWarning: use_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n  with pd.option_context('mode.use_inf_as_na', True):\n\n\n\n\n\n\n\n\n\n\n\nHeat Map\n\n\nShow the code\nnumeric_cols =df.select_dtypes(include=[np.number])\n\ncorrelation_matrix = numeric_cols.corr()\n\nplt.figure(figsize=(16, 10))\nsns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', linewidths=0.5)\nplt.title('Correlation Matrix of Climate Factors and Vegetation Types')\nplt.show()"
  },
  {
    "objectID": "Viz.html",
    "href": "Viz.html",
    "title": "Import Dataset",
    "section": "",
    "text": "Import Dataset\n\n\nShow the code\nimport pandas as pd\nimport numpy as np\nimport plotly.express as px\npredict_outcome = pd.read_csv('../data/predict_outcome.csv')\nnearterm_cleaned = pd.read_csv('../data/nearterm_cleaned.csv')\n\n\n\n\nShow the code\npredict_outcome.head()\n\n\n\n\n\n\n\n\n\n\nlong\nlat\nyear\nTimePeriod\nRCP\nscenario\nDrySoilDays_Summer_whole\nEvap_Summer\nExtremeShortTermDryStress_Summer_whole\nFrostDays_Winter\n...\nPPT_Winter\nPPT_Summer\nT_Winter\nT_Summer\nTmax_Summer\nTmin_Winter\nVWC_Winter_whole\nVWC_Spring_whole\nVWC_Summer_whole\nVWC_Fall_whole\n\n\n\n\n0\n-110.047\n37.604\n2021\nNT\n4.5\nsc22\n0.0\n2.14072\n35.247\n69.0\n...\n2.67\n4.48\n2.131\n24.55\n35.95\n-12.15\n0.04704\n0.0439\n0.04214\n0.09343\n\n\n1\n-110.047\n37.604\n2021\nNT\n4.5\nsc23\n0.0\n2.14072\n35.247\n69.0\n...\n2.67\n4.48\n2.131\n24.55\n35.95\n-12.15\n0.04704\n0.0439\n0.04214\n0.09343\n\n\n2\n-110.047\n37.604\n2021\nNT\n4.5\nsc24\n0.0\n2.14072\n35.247\n69.0\n...\n2.67\n4.48\n2.131\n24.55\n35.95\n-12.15\n0.04704\n0.0439\n0.04214\n0.09343\n\n\n3\n-110.047\n37.604\n2021\nNT\n4.5\nsc25\n0.0\n2.14072\n35.247\n69.0\n...\n2.67\n4.48\n2.131\n24.55\n35.95\n-12.15\n0.04704\n0.0439\n0.04214\n0.09343\n\n\n4\n-110.047\n37.604\n2021\nNT\n4.5\nsc26\n0.0\n2.14072\n35.247\n69.0\n...\n2.67\n4.48\n2.131\n24.55\n35.95\n-12.15\n0.04704\n0.0439\n0.04214\n0.09343\n\n\n\n\n5 rows × 21 columns\n\n\n\n\n\n\nQ1: Which Scenario Most Fits Prediction?\n\n\nShow the code\ncommon_columns = ['long', 'lat', 'year', 'TimePeriod', 'RCP', 'scenario']\nmerged_data = pd.merge(predict_outcome, nearterm_cleaned, on=common_columns, suffixes=('_pred', '_actual'))\n\n#cleaned_merged_data = merged_data.dropna()\n\nprediction_columns = ['DrySoilDays_Summer_whole', 'Evap_Summer', 'ExtremeShortTermDryStress_Summer_whole', \n                      'FrostDays_Winter', 'PPT_Winter', 'PPT_Summer', 'T_Winter', 'T_Summer', \n                      'Tmax_Summer', 'Tmin_Winter', 'VWC_Winter_whole', 'VWC_Spring_whole', \n                      'VWC_Summer_whole', 'VWC_Fall_whole']\n\nerrors_by_scenario = {}\nfor column in prediction_columns:\n    pred_column = column + '_pred'\n    actual_column = column + '_actual'\n    merged_data['error'] = (merged_data[actual_column] - merged_data[pred_column]) ** 2\n    rmse_by_scenario = merged_data.groupby('scenario')['error'].mean().apply(np.sqrt)\n    errors_by_scenario[column] = rmse_by_scenario\ncombined_errors = pd.DataFrame(errors_by_scenario)\n\ncombined_errors['mean_error'] = combined_errors.mean(axis=1)\nlowest_error_scenario = combined_errors['mean_error'].idxmin()\n\n\n\n\nShow the code\nimport plotly.express as px\nimport plotly.io as pio\npio.renderers.default = 'iframe_connected'\n\nfig = px.bar(combined_errors.reset_index(), x='scenario', y='mean_error', title='Mean RMSE by Scenario',\n             labels={'mean_error': 'Mean RMSE', 'scenario': 'Scenario'}, text='mean_error')\n\nfig.add_vline(x=combined_errors.index.get_loc(lowest_error_scenario), line_width=3, line_dash=\"dash\", line_color=\"green\")\n\nfig.show()\n\n\n\n\n\nBut the examination of the Mean RMSE values across different situations shows that sc22 (Scenario 22) gives the lowest Mean RMSE (i.e. gives the best possible predictive accuracy among Scenarios that I have analysed). This performance is truly remarkable, and this tells us that data predicted by sc22 will give the best possible alignment with true to-be values whenever we shall put them with our Random forest model in the future. The sc22 corresponds to Representative Concentration Pathway 4.5 (RCP45), and uses the Beijing Climate Center Climate System Model version 1.1 (bcc-csm1-1) – which stands to a moderate trajectory in terms of the climate change.\nFor any future forecasting experiment, we shall ensure the highest possible level of accuracy in our projections by making use of sc22 forecasts, precisely because the scenario is extremely robust in this regard.\nAhead in our study, the next crucial step will be to gauge future temporal changes in temperature for the next 50 years – by appropriately using Scenario 22 which will help us to better forecast future trends in Tmax_Summer and Tmin_Winter measurements – both insights are useful for building future climate models and informing strategic deliberations and decision-making processes.\n\n\nQ2: How will temprature change in future 50 years based on senario 22?\n\n\nShow the code\nhistoric_data = pd.read_csv('../data/historic_cleaned.csv')\nnearterm_data = nearterm_cleaned[nearterm_cleaned['scenario'] == 'sc22']\n\ncombined_data = pd.concat([historic_data, nearterm_data], ignore_index=True)\n\n\n\n\nShow the code\nfrom sklearn.linear_model import LinearRegression\nhistorical_data = combined_data[combined_data['scenario'] == 'sc1']\n\nmodels = {}\npredictions = []\n\nlocations = historical_data[['long', 'lat']].drop_duplicates()\n\nfor _, location in locations.iterrows():\n    long = location['long']\n    lat = location['lat']\n    \n    location_data = historical_data[(historical_data['long'] == long) & (historical_data['lat'] == lat)]\n    \n    X = location_data[['year']].values\n    y_winter = location_data['T_Winter'].values\n    y_summer = location_data['T_Summer'].values\n    \n    model_winter = LinearRegression().fit(X, y_winter)\n    model_summer = LinearRegression().fit(X, y_summer)\n    \n    models[(long, lat)] = {\n        'winter': model_winter,\n        'summer': model_summer\n    }\n    future_years = np.arange(2025, 2024 + 50).reshape(-1, 1)\n    predicted_winter = model_winter.predict(future_years)\n    predicted_summer = model_summer.predict(future_years)\n    \n    for year, winter_temp, summer_temp in zip(future_years.flatten(), predicted_winter, predicted_summer):\n        predictions.append({\n            'long': long,\n            'lat': lat,\n            'year': year,\n            'T_Winter': winter_temp,\n            'T_Summer': summer_temp\n        })\n\npredictions_df = pd.DataFrame(predictions)\n\n\n\n\nShow the code\npio.renderers.default = 'iframe_connected'\nfig = px.scatter_geo(\n    predictions_df,\n    lon='long',\n    lat='lat',\n    color='T_Summer',\n    animation_frame='year',\n    projection=\"natural earth\",\n    title='Yearly Predicted Temperatures (2024-2074)',\n    range_color=[22,24],\n    color_continuous_scale=px.colors.diverging.RdBu_r\n)\n\nfig.update_geos(\n    showcountries=True,\n    showcoastlines=True,\n    showland=True,\n    landcolor=\"lightgray\",\n    fitbounds=\"locations\",\n        lonaxis=dict(\n        showgrid=True,\n        gridwidth=1,\n        range=[-180, 180],\n        dtick=10\n    ),\n    lataxis=dict(\n        showgrid=True,\n        gridwidth=1,\n        range=[-90, 90],\n        dtick=10\n    )\n)\nfig.update_layout(template='simple_white',geo=dict(landcolor='white'))\nfig.show()\n\n\n\n\n\nIn the observed data, the temperature in this region is increasing year by year from 2025 to 2074, and the temperature of the west is higher than that of the east. The next step we should take is to investigate the reasons why the temperature changes so much in a certain area. We can consider various variables for this part, such as variations of plant coverage areas, urbanisation features, local topographic features, and regional climatic influences on the region. By conducting such an analysis, we can identify the main causal factors behind the variation in temperature and take actions to minimise potential climate impacts.\n\n\nQ3: Why does east part has lower temperature than the west part?\n\n\nShow the code\npio.renderers.default = 'iframe_connected'\nhistoric_data.head()\nscatter_hist = px.scatter(\n    historic_data,\n    x='lat',\n    y='Bare_percent',\n    hover_name='lat',\n    marginal_x='histogram',\n    marginal_y='histogram',\n    title='Scatter Plot with Marginal Histograms: Bare Ground Coverage Percent with Latitude',\n    labels={'lat': 'Latitude', 'Bare_percent': 'Bare Ground Coverage Percent (%)'},\n    trendline=\"ols\",\n    template='simple_white'\n)\nscatter_hist.show()\n\n\n\n\n\nFrom the scatter plot analysis, it is obvious that the east part of the region has less bare ground coverage compared to the west part; thus, more plant coverage will result in less temperature. This further underpins the importance of vegetation in terms of reducing temperature increase and countering global warming in the future. Further research that this analysis could bring about will be to find out the exact types of plants that highly influence temperature. Through such an analysis of the influence of different plant species upon temperature variation, it will be possible to make educated guesses on which type of vegetation best regulates the climate and, therefore, come up with specific strategies for environmental management and conservation.\n\n\nQ4: What kind of plant helps prevent global warming most efficiently?\n\n\nShow the code\nimport plotly.figure_factory as ff\npio.renderers.default = 'iframe_connected'\ncorrelation_data = historical_data[['T_Summer', 'T_Winter', 'treecanopy_percent', 'Ann_Herb_percent', \n                                    'Herb_percent', 'Litter_percent', 'Shrub_percent']]\n\ncorrelation_matrix = correlation_data.corr()\n\nfig = ff.create_annotated_heatmap(\n    z=correlation_matrix.values,\n    x=list(correlation_matrix.columns),\n    y=list(correlation_matrix.index),\n    annotation_text=correlation_matrix.round(2).values,\n    colorscale='RdBu',  \n    showscale=True\n)\n\nfig.update_layout(\n    title='Correlation Matrix of Climate Factors and Vegetation Types',\n    xaxis_title='Variables',\n    yaxis_title='Variables',\n    xaxis=dict(tickmode='array', tickvals=list(range(len(correlation_matrix.columns))), ticktext=list(correlation_matrix.columns)),\n    yaxis=dict(tickmode='array', tickvals=list(range(len(correlation_matrix.index))), ticktext=list(correlation_matrix.index))\n)\n\n\n\n\n\nPlant litter has a strong negative correlation with both T_Summer and T_Winter, which becomes significant further. In other words, more litter means a lower temperature, actually explaining that plant litter does make a difference, core to temperature regulation. There, again, is a very strong positive relationship with herb coverage and litter coverage, meaning that as much as literature coverage, ventilation must be provided.\nTherefore, plant litter seems to be the major variable associated in the support of this increasing temperature, and the temperature regulation by herb coverage is in an indirect way because of a strong association with litter coverage. Following on, maintenance and management in order to enhance litter and herb coverage could thus be successful in fighting against this increase in temperatures at the same time assuring some stability in the environment.\n\n\nConclusion\nUsing data from Scenario 22 (sc22) to look at all the changes in temperature trends from 2025 to 2074 gives us useful information about the things that cause temperature changes. Initially, we saw a steady rise in temperatures across the area, with the western part always having warmer temperatures than the eastern part. So, it was thought that these differences in temperature might be caused by differences in the amount of plants covering the ground.\nOur further research confirmed that there is less open land in the eastern part of the area than in the western part. This highlights how important vegetation is for keeping the temperature stable. This finding shows how important plants are for lowering temperatures and stopping global warming. So, our main goal was to find the specific plant types that have the most significant effect on temperature.\nA detailed study that looked at the relationships between different types of plants and temperature found that plant litter has a big effect on lowering temperature. There is a negative relationship between plant litter and both T_Summer and T_Winter. This means that more litter means cooler temperatures. This shows that plant litter is very important for keeping temperatures in check and stopping things from getting too hot.\nThe connection matrix also showed a strong positive link between the amount of herb cover and the amount of litter cover. Basically, this means that areas with more herbaceous plants tend to have more fallen leaves and other organic matter, which has a secondary effect on how temperature is controlled. When you look at how the coverage of herbs and litter is linked, you can see how different types of plants work together to keep the temperature stable and cold.\nTo sum up, the study shows that plant litter is very important for keeping temperatures from rising, and herb covering is even more helpful because it is closely related to litter. These results make it clear that protecting and growing plant litter and herb coverage are effective ways to slow down rising temperatures and keep the environment stable. It is very important to keep different kinds of plants alive and growing so that the environment stays healthy and strong in the face of climate change.The Mean RMSE values for different cases show that Scenario 22 (sc22) has the lowest RMSE, which means it can predict events more accurately than any other scenario. The great outcome shows that the data forecasted by Scenario 22 is the most accurate when our Random Forest model is used. The Beijing Climate Center Climate System Model version 1.1 (bcc-csm1-1) is used in Scenario 22 to show a mild path of climate change. It is linked to the Representative Concentration Pathway 4.5 (RCP45). Using Scenario 22’s predictions for more research will ensure the highest level of accuracy in our predictions because they are strong and reliable. The next important step is to predict how temperatures will change over the next 50 years by using Scenario 22 to guess how Tmax_Summer and Tmin_Winter will change in the future. This study will give us useful details about how the weather will change in the future, which will help us make plans and decisions."
  },
  {
    "objectID": "ml.html",
    "href": "ml.html",
    "title": "Import Data Set",
    "section": "",
    "text": "Import Data Set\n\n\nShow the code\nimport plotly.express as px\nimport pandas as pd\n\ndata = pd.read_csv('../data/final.csv')\ndata.drop(columns=['Unnamed: 0'],inplace=True)\ndata.head()\n\n\n\n\n\n\n\n\n\n\nlong\nlat\nyear\nTimePeriod\nRCP\nscenario\ntreecanopy_percent\nAnn_Herb_percent\nBare_percent\nHerb_percent\n...\nPPT_Winter\nPPT_Summer\nT_Winter\nT_Summer\nTmax_Summer\nTmin_Winter\nVWC_Winter_whole\nVWC_Spring_whole\nVWC_Summer_whole\nVWC_Fall_whole\n\n\n\n\n0\n-110.047\n37.604\n1980\nHist\nhistorical\nsc1\n0.0\n0.0\n78.505\n4.673\n...\n13.79\n2.69\n0.965\n23.159\n37.05\n-12.45\n0.113\n0.097\n0.042\n0.052\n\n\n1\n-110.047\n37.604\n1981\nHist\nhistorical\nsc1\n0.0\n0.0\n78.505\n4.673\n...\n2.25\n9.39\n3.334\n23.271\n37.55\n-9.35\n0.049\n0.061\n0.043\n0.094\n\n\n2\n-110.047\n37.604\n1982\nHist\nhistorical\nsc1\n0.0\n0.0\n78.505\n4.673\n...\n4.12\n9.50\n-0.016\n22.057\n36.65\n-16.55\n0.109\n0.075\n0.046\n0.068\n\n\n3\n-110.047\n37.604\n1983\nHist\nhistorical\nsc1\n0.0\n0.0\n78.505\n4.673\n...\n7.09\n10.22\n0.409\n21.328\n34.55\n-15.05\n0.120\n0.103\n0.044\n0.075\n\n\n4\n-110.047\n37.604\n1984\nHist\nhistorical\nsc1\n0.0\n0.0\n78.505\n4.673\n...\n4.77\n9.49\n-1.047\n21.960\n35.35\n-18.45\n0.120\n0.078\n0.043\n0.070\n\n\n\n\n5 rows × 27 columns\n\n\n\n\n\n\nShow the code\ncleaned_data = data.drop(columns=['TimePeriod', 'RCP', 'scenario'])\n\n\n\n\nShow the code\nfrom sklearn.model_selection import train_test_split\n\ntrain_data = cleaned_data[cleaned_data['year'] &lt; 2021]\ntest_data = cleaned_data[cleaned_data['year'] &gt;= 2021]\n\npredictors = train_data.drop(['DrySoilDays_Summer_whole', 'Evap_Summer',\n                              'ExtremeShortTermDryStress_Summer_whole', 'FrostDays_Winter',\n                              'NonDrySWA_Summer_whole', 'PPT_Winter', 'PPT_Summer', 'T_Winter',\n                              'T_Summer', 'Tmax_Summer', 'Tmin_Winter', 'VWC_Winter_whole',\n                              'VWC_Spring_whole', 'VWC_Summer_whole', 'VWC_Fall_whole'], axis=1)\ntargets = train_data[['DrySoilDays_Summer_whole', 'Evap_Summer',\n                      'ExtremeShortTermDryStress_Summer_whole', 'FrostDays_Winter',\n                      'NonDrySWA_Summer_whole', 'PPT_Winter', 'PPT_Summer', 'T_Winter',\n                      'T_Summer', 'Tmax_Summer', 'Tmin_Winter', 'VWC_Winter_whole',\n                      'VWC_Spring_whole', 'VWC_Summer_whole', 'VWC_Fall_whole']]\n\nX_train, X_valid, y_train, y_valid = train_test_split(predictors, targets, test_size=0.2, random_state=42)\n\nX_train.shape, X_valid.shape, y_train.shape, y_valid.shape\n\n\n((3525, 9), (882, 9), (3525, 15), (882, 15))\n\n\n\n\nMulti-output GBM\n\n\nShow the code\nfrom sklearn.ensemble import GradientBoostingRegressor\nfrom sklearn.multioutput import MultiOutputRegressor\nfrom sklearn.metrics import mean_squared_error\nimport numpy as np\n\ngbm = GradientBoostingRegressor(random_state=42)\n\nmultioutput_gbm = MultiOutputRegressor(gbm)\n\nmultioutput_gbm.fit(X_train, y_train)\n\ny_pred_gbm = multioutput_gbm.predict(X_valid)\n\nrmse_gbm = np.sqrt(mean_squared_error(y_valid, y_pred_gbm))\nrmse_gbm\n\n\n2.4048735840891675\n\n\n\n\nNeural Network\n\n\nShow the code\nfrom sklearn.neural_network import MLPRegressor\nnn = MLPRegressor(hidden_layer_sizes=(100,), max_iter=500, random_state=42)\n\nmultioutput_nn = MultiOutputRegressor(nn)\n\nmultioutput_nn.fit(X_train, y_train)\n\ny_pred_nn = multioutput_nn.predict(X_valid)\n\nrmse_nn = np.sqrt(mean_squared_error(y_valid, y_pred_nn))\nrmse_nn\n\n\n6.1298204920474975\n\n\n\n\nLogistic Regression\n\n\nShow the code\nfrom sklearn.linear_model import LinearRegression\nlinear_reg = LinearRegression()\n\nmultioutput_lr = MultiOutputRegressor(linear_reg)\n\nmultioutput_lr.fit(X_train, y_train)\n\ny_pred_lr = multioutput_lr.predict(X_valid)\n\nrmse_lr = np.sqrt(mean_squared_error(y_valid, y_pred_lr))\nrmse_lr\n\n\n6.006463655660495\n\n\n\n\nRandom Forest\n\n\nShow the code\nfrom sklearn.ensemble import RandomForestRegressor\nrf = RandomForestRegressor(random_state=42)\n\nmultioutput_rf = MultiOutputRegressor(rf)\n\nmultioutput_rf.fit(X_train, y_train)\n\ny_pred_rf = multioutput_rf.predict(X_valid)\n\nrmse_rf = np.sqrt(mean_squared_error(y_valid, y_pred_rf))\nrmse_rf\n\n\n2.2181062671685168\n\n\n\n\nSVM\n\n\nShow the code\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.svm import SVR\nfrom sklearn.neighbors import KNeighborsRegressor\nfrom sklearn.multioutput import MultiOutputRegressor\nfrom sklearn.metrics import mean_squared_error\nimport numpy as np\n\nscaler = StandardScaler()\nX_train_scaled = scaler.fit_transform(X_train)\nX_valid_scaled = scaler.transform(X_valid)\n\nsvm_model = MultiOutputRegressor(SVR())\nsvm_model.fit(X_train_scaled, y_train)\n\nsvm_predictions = svm_model.predict(X_valid_scaled)\nsvm_rmse = np.sqrt(mean_squared_error(y_valid, svm_predictions))\nsvm_rmse\n\n\n6.462315059025544\n\n\n\n\nKNN\n\n\nShow the code\nknn_model = MultiOutputRegressor(KNeighborsRegressor())\nknn_model.fit(X_train_scaled, y_train)\n\nknn_predictions = knn_model.predict(X_valid_scaled)\nknn_rmse = np.sqrt(mean_squared_error(y_valid, knn_predictions))\n\nknn_rmse\n\n\n3.4243566569531936\n\n\n\n\nDecision Tree\n\n\nShow the code\nfrom sklearn.tree import DecisionTreeRegressor\n\ndt_model = MultiOutputRegressor(DecisionTreeRegressor(random_state=42))\ndt_model.fit(X_train_scaled, y_train)\n\ndt_predictions = dt_model.predict(X_valid_scaled)\ndt_rmse = np.sqrt(mean_squared_error(y_valid, dt_predictions))\n\ndt_rmse\n\n\n2.233301096934572\n\n\n\n\nModel Selection\nIt seeems that Random Forest Model has the lowest RMSE. Therefore, I decide to choose it as the most fit model to do the prediction.\n\n\nPrediction\n\n\nShow the code\ndata2 = pd.read_csv('../data/nearterm_cleaned.csv')\n\ncontextual_data = data2[['long','lat','year','TimePeriod', 'RCP', 'scenario']]\n\n\n\n\nShow the code\nX_test = data2.drop(['TimePeriod', 'RCP', 'scenario',\n                     'DrySoilDays_Summer_whole', 'Evap_Summer', 'ExtremeShortTermDryStress_Summer_whole',\n                     'FrostDays_Winter', 'NonDrySWA_Summer_whole', 'PPT_Winter', 'PPT_Summer', 'T_Winter',\n                     'T_Summer', 'Tmax_Summer', 'Tmin_Winter', 'VWC_Winter_whole',\n                     'VWC_Spring_whole', 'VWC_Summer_whole', 'VWC_Fall_whole'], axis=1)\n\npredictions_rf = multioutput_rf.predict(X_test)\n\npredicted_columns = [\n    'DrySoilDays_Summer_whole', 'Evap_Summer', 'ExtremeShortTermDryStress_Summer_whole',\n    'FrostDays_Winter', 'NonDrySWA_Summer_whole', 'PPT_Winter', 'PPT_Summer', 'T_Winter',\n    'T_Summer', 'Tmax_Summer', 'Tmin_Winter', 'VWC_Winter_whole',\n    'VWC_Spring_whole', 'VWC_Summer_whole', 'VWC_Fall_whole'\n]\npredictions_df = pd.DataFrame(predictions_rf, columns=predicted_columns, index=X_test.index)\n\npredictions_df\n\n\n\n\n\n\n\n\n\n\nDrySoilDays_Summer_whole\nEvap_Summer\nExtremeShortTermDryStress_Summer_whole\nFrostDays_Winter\nNonDrySWA_Summer_whole\nPPT_Winter\nPPT_Summer\nT_Winter\nT_Summer\nTmax_Summer\nTmin_Winter\nVWC_Winter_whole\nVWC_Spring_whole\nVWC_Summer_whole\nVWC_Fall_whole\n\n\n\n\n0\n0.00\n2.14072\n35.2470\n69.0\n0.01133\n2.6700\n4.4800\n2.1310\n24.55000\n35.950\n-12.15\n0.04704\n0.04390\n0.04214\n0.09343\n\n\n1\n0.00\n2.14072\n35.2470\n69.0\n0.01133\n2.6700\n4.4800\n2.1310\n24.55000\n35.950\n-12.15\n0.04704\n0.04390\n0.04214\n0.09343\n\n\n2\n0.00\n2.14072\n35.2470\n69.0\n0.01133\n2.6700\n4.4800\n2.1310\n24.55000\n35.950\n-12.15\n0.04704\n0.04390\n0.04214\n0.09343\n\n\n3\n0.00\n2.14072\n35.2470\n69.0\n0.01133\n2.6700\n4.4800\n2.1310\n24.55000\n35.950\n-12.15\n0.04704\n0.04390\n0.04214\n0.09343\n\n\n4\n0.00\n2.14072\n35.2470\n69.0\n0.01133\n2.6700\n4.4800\n2.1310\n24.55000\n35.950\n-12.15\n0.04704\n0.04390\n0.04214\n0.09343\n\n\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n...\n\n\n18075\n6.73\n2.64730\n33.0973\n72.0\n0.22235\n2.9548\n6.1216\n1.0278\n22.73946\n34.117\n-13.84\n0.09297\n0.10247\n0.08987\n0.12108\n\n\n18076\n6.73\n2.64730\n33.0973\n72.0\n0.22235\n2.9548\n6.1216\n1.0278\n22.73946\n34.117\n-13.84\n0.09297\n0.10247\n0.08987\n0.12108\n\n\n18077\n6.73\n2.64730\n33.0973\n72.0\n0.22235\n2.9548\n6.1216\n1.0278\n22.73946\n34.117\n-13.84\n0.09297\n0.10247\n0.08987\n0.12108\n\n\n18078\n6.73\n2.64730\n33.0973\n72.0\n0.22235\n2.9548\n6.1216\n1.0278\n22.73946\n34.117\n-13.84\n0.09297\n0.10247\n0.08987\n0.12108\n\n\n18079\n6.73\n2.64730\n33.0973\n72.0\n0.22235\n2.9548\n6.1216\n1.0278\n22.73946\n34.117\n-13.84\n0.09297\n0.10247\n0.08987\n0.12108\n\n\n\n\n18080 rows × 15 columns\n\n\n\n\n\n\nShow the code\nmerged_predictions = pd.concat([contextual_data.reset_index(drop=True), predictions_df], axis=1)\n\noutput_path = '../data/predict_outcome.csv'\nmerged_predictions.to_csv(output_path, index=False)"
  }
]